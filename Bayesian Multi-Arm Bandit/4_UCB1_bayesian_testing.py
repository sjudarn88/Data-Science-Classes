# -*- coding: utf-8 -*-
"""Bayesian ML Class Code 4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H-KWDmIg68YwtraHFEk9KE4BRp5LZXoh

**Class code : UCB1 Bayesian Testing**
"""

from __future__ import print_function, division
from builtins import range
import matplotlib.pyplot as plt
import numpy as np

NUM_TRIALS = 10000
EPS =0.1
BANDIT_PROBABILITIES = [0.2,0.5,0.75]

class Bandit:
  def __init__(self,p):
    # p: the win rate
    self.p = p
    self.p_estimate = 0
    self.N = 0 # num samples collected so far

  def pull(self):
    # draw a 1 with probability p
    # np.random/random() returns value from 0-1, > = < function returns 0 or 1
    # combined result is to only give 1 at 20% of all pulls
    return np.random.random() < self.p
  
  def update(self,x):
    self.N = self.N + 1   
    self.p_estimate =(1 - 1/self.N)* self.p_estimate + 1/self.N * x

def ucb(mean,n,nj):
  return mean + np.sqrt(2 * np.log(n)/nj)

def experiment():
  bandits = [Bandit(p) for p in BANDIT_PROBABILITIES]
  rewards = np.empty(NUM_TRIALS)
  total_plays = 0

  # initialization: play each bandit once
  for j in range(len(bandits)):
    x = bandits[j].pull()
    total_plays += 1
    bandits[j].update(x)
  
  for i in range(NUM_TRIALS):
    j = np.argmax([ucb(b.p_estimate,total_plays,b.N) for b in bandits])
    x = bandits[j].pull()
    total_plays += 1
    # update rewards log 
    rewards[i] = x
    # update the distribution for the bandit whose are we just pulled
    bandits[j].update(x)

  # plot the results
  cumulative_rewards = np.cumsum(rewards)
  win_rates = cumulative_rewards / (np.arange(NUM_TRIALS) + 1)

  plt.ylim([0,1])
  plt.plot(win_rates)
  plt.plot(np.ones(NUM_TRIALS) * np.max(BANDIT_PROBABILITIES))
  plt.xscale('log')
  plt.show()

if __name__ =="__main__":
  experiment()