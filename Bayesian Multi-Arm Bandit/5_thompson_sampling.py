# -*- coding: utf-8 -*-
"""Bayesian ML Class Code 5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ylIBH1CLAsAYNkJVKOK032JMW2QX1AzR

**Class code : Thompson Sampling**
"""

from __future__ import print_function, division
from builtins import range
import matplotlib.pyplot as plt
import numpy as np
from scipy.stats import beta

# np.random.seed(2)
NUM_TRIALS = 2000
BANDIT_PROBABILITIES = [0.2,0.5,0.75]

class Bandit:
  def __init__(self,p):
    # p: the win rate
    self.p = p
    # a,b gives the uniform distribution
    self.a = 1
    self.b = 1
    self.N = 0 # num samples collected so far

  def pull(self):
    # draw a 1 with probability p
    # np.random/random() returns value from 0-1, > = < function returns 0 or 1
    # combined result is to only give 1 at 20% of all pulls
    return np.random.random() < self.p
  
  def sample(self):
    return np.random.beta(self.a,self.b)
  
  def update(self,x):
    self.a += x
    self.b += 1 - x
    self.N += 1

def plot(bandits, trial):
  x = np.linspace(0 ,1, 200)
  for b in bandits:
    y = beta.pdf(x, b.a, b.b)
    plt.plot(x, y, label= f"real p: {b.p:.4f}, win rate= {b.a-1}/{b.N}")
  plt.title(f"Bandit distributions after {trial} trails")
  plt.legend()
  plt.show()

def experiment():
  bandits = [Bandit(p) for p in BANDIT_PROBABILITIES]

  sample_points = [5,10,20,50,100,200,500,1000,1500,1999]
  rewards = np.zeros(NUM_TRIALS)
  
  for i in range(NUM_TRIALS):
    # Thompson sampling
    j = np.argmax([b.sample() for b in bandits])
    #plot the posteriors
    if i in sample_points:
      plot(bandits,i)
    # pull the arm
    x = bandits[j].pull()

    # update rewards log 
    rewards[i] = x
    # update the distribution for the bandit whose are we just pulled
    bandits[j].update(x)

  # plot the results
  cumulative_rewards = np.cumsum(rewards)
  win_rates = cumulative_rewards / (np.arange(NUM_TRIALS) + 1)

  plt.ylim([0,1])
  plt.plot(win_rates)
  plt.plot(np.ones(NUM_TRIALS) * np.max(BANDIT_PROBABILITIES))
  plt.xscale('log')
  plt.show()

if __name__ =="__main__":
  experiment()